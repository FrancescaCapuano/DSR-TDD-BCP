{"name": "Mobile telegrams are sent every 60 seconds ±10%", "status": "failed", "statusDetails": {"message": "AssertionError: Timing errors found:\n  2025-06-18 00:06:53: interval = 414.00s\n  2025-06-18 00:09:53: interval = 121.00s\n  2025-06-19 00:08:11: interval = 533.00s\n  2025-06-20 00:09:00: interval = 592.00s\n  2025-06-21 00:07:27: interval = 489.00s\n  2025-06-21 00:10:24: interval = 119.00s\n  2025-06-22 00:07:33: interval = 457.00s\n  2025-06-22 00:11:31: interval = 238.00s\n  2025-06-23 00:07:13: interval = 484.00s\n  2025-06-23 00:09:24: interval = 131.00s\n  2025-06-24 00:07:21: interval = 467.00s\n  2025-06-24 00:11:24: interval = 243.00s\nassert not ['2025-06-18 00:06:53: interval = 414.00s', '2025-06-18 00:09:53: interval = 121.00s', '2025-06-19 00:08:11: interval ...:09:00: interval = 592.00s', '2025-06-21 00:07:27: interval = 489.00s', '2025-06-21 00:10:24: interval = 119.00s', ...]", "trace": "@allure.feature(\"Mobile Telegram Timing\")\n    @allure.title(\"Mobile telegrams are sent every 60 seconds ±10%\")\n    def test_timing():\n        telegrams = record_telegrams(duration_minutes=10000)\n    \n        timings = [\n            datetime.strptime(\n                telegram.split(\" at \")[1].split(\" Volume: \")[0], \"%Y-%m-%d %H:%M:%S\"\n            )\n            for telegram in telegrams\n            if telegram.startswith(\"Mobile\")\n        ]\n    \n        errors = []\n        for i in range(1, len(timings)):\n            diff_seconds = (timings[i] - timings[i - 1]).total_seconds()\n            if not (54 <= diff_seconds <= 66):\n                errors.append(f\"{timings[i]}: interval = {diff_seconds:.2f}s\")\n    \n>       assert not errors, \"Timing errors found:\\n\" + \"\\n\".join(errors)\nE       AssertionError: Timing errors found:\nE         2025-06-18 00:06:53: interval = 414.00s\nE         2025-06-18 00:09:53: interval = 121.00s\nE         2025-06-19 00:08:11: interval = 533.00s\nE         2025-06-20 00:09:00: interval = 592.00s\nE         2025-06-21 00:07:27: interval = 489.00s\nE         2025-06-21 00:10:24: interval = 119.00s\nE         2025-06-22 00:07:33: interval = 457.00s\nE         2025-06-22 00:11:31: interval = 238.00s\nE         2025-06-23 00:07:13: interval = 484.00s\nE         2025-06-23 00:09:24: interval = 131.00s\nE         2025-06-24 00:07:21: interval = 467.00s\nE         2025-06-24 00:11:24: interval = 243.00s\nE       assert not ['2025-06-18 00:06:53: interval = 414.00s', '2025-06-18 00:09:53: interval = 121.00s', '2025-06-19 00:08:11: interval ...:09:00: interval = 592.00s', '2025-06-21 00:07:27: interval = 489.00s', '2025-06-21 00:10:24: interval = 119.00s', ...]\n\ntest_to_fail.py:117: AssertionError"}, "start": 1750171565103, "stop": 1750171565473, "uuid": "2ee3aefb-170d-474c-9dad-983e47bd8908", "historyId": "d9ec0c27c60df571c6e2bc7da59f86ea", "testCaseId": "d9ec0c27c60df571c6e2bc7da59f86ea", "fullName": "test_to_fail#test_timing", "labels": [{"name": "feature", "value": "Mobile Telegram Timing"}, {"name": "suite", "value": "test_to_fail"}, {"name": "host", "value": "francesca-ThinkPad-E14-Gen-2"}, {"name": "thread", "value": "130600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_to_fail"}]}