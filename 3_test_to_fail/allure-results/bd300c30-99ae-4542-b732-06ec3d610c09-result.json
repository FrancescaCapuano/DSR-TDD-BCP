{"name": "Static telegrams sent hourly and always with STATUS: OK", "status": "failed", "statusDetails": {"message": "AssertionError: 61 static telegram(s) had incorrect status.\nassert not ['Static telegram at 2025-06-18 13:00:47 STATUS: ERROR', 'Static telegram at 2025-06-19 13:00:38 STATUS: ERROR', 'Stat...', 'Static telegram at 2025-06-22 13:00:12 STATUS: ERROR', 'Static telegram at 2025-06-23 13:00:33 STATUS: ERROR', ...]", "trace": "@allure.feature(\"Static Telegrams\")\n    @allure.title(\"Static telegrams sent hourly and always with STATUS: OK\")\n    def test_static_telegrams_status():\n        telegrams = record_telegrams(duration_minutes=100000)\n    \n        static_telegrams = [tg for tg in telegrams if tg.startswith(\"Static\")]\n    \n        # Attach all static telegrams for inspection\n        allure.attach(\n            \"\\n\".join(static_telegrams),\n            name=\"All Static Telegrams\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n        # Identify bad telegrams (not STATUS: OK)\n        bad_telegrams = [tg for tg in static_telegrams if \"STATUS: OK\" not in tg]\n    \n        if bad_telegrams:\n            allure.attach(\n                \"\\n\".join(bad_telegrams),\n                name=\"Static Telegrams with Incorrect Status\",\n                attachment_type=allure.attachment_type.TEXT,\n            )\n    \n        with allure.step(\"Check that all static telegrams contain STATUS: OK\"):\n>           assert (\n                not bad_telegrams\n            ), f\"{len(bad_telegrams)} static telegram(s) had incorrect status.\"\nE           AssertionError: 61 static telegram(s) had incorrect status.\nE           assert not ['Static telegram at 2025-06-18 13:00:47 STATUS: ERROR', 'Static telegram at 2025-06-19 13:00:38 STATUS: ERROR', 'Stat...', 'Static telegram at 2025-06-22 13:00:12 STATUS: ERROR', 'Static telegram at 2025-06-23 13:00:33 STATUS: ERROR', ...]\n\ntest_to_fail.py:69: AssertionError"}, "steps": [{"name": "Check that all static telegrams contain STATUS: OK", "status": "failed", "statusDetails": {"message": "AssertionError: 61 static telegram(s) had incorrect status.\nassert not ['Static telegram at 2025-06-18 13:00:47 STATUS: ERROR', 'Static telegram at 2025-06-19 13:00:38 STATUS: ERROR', 'Stat...', 'Static telegram at 2025-06-22 13:00:12 STATUS: ERROR', 'Static telegram at 2025-06-23 13:00:33 STATUS: ERROR', ...]\n", "trace": "  File \"/home/francesca/Desktop/DS Bootcamp/DSR-TDD-BCP/3_test_to_fail/test_to_fail.py\", line 69, in test_static_telegrams_status\n    assert (\n"}, "start": 1750171565047, "stop": 1750171565048}], "attachments": [{"name": "All Static Telegrams", "source": "4740a084-e01e-45fb-8861-164a2914f94d-attachment.txt", "type": "text/plain"}, {"name": "Static Telegrams with Incorrect Status", "source": "c6f6960b-a738-4743-b4ff-aedc647184dc-attachment.txt", "type": "text/plain"}], "start": 1750171563628, "stop": 1750171565048, "uuid": "e46b74ba-c9e8-4684-869f-3abaa7be649b", "historyId": "974dd564a9a454fb8d822f7e397c88f8", "testCaseId": "974dd564a9a454fb8d822f7e397c88f8", "fullName": "test_to_fail#test_static_telegrams_status", "labels": [{"name": "feature", "value": "Static Telegrams"}, {"name": "suite", "value": "test_to_fail"}, {"name": "host", "value": "francesca-ThinkPad-E14-Gen-2"}, {"name": "thread", "value": "130600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_to_fail"}]}